import InvokeAgent as agenthelper
import streamlit as st
import uuid
import json
import pandas as pd
from PIL import Image, ImageOps, ImageDraw

# Streamlit page configuration
st.set_page_config(page_title="Verdigris Chatbot", page_icon=":robot_face:", layout="wide")

if 'session_id' not in st.session_state:
    st.session_state['session_id'] = str(uuid.uuid4())

# Function to crop image into a circle
def crop_to_circle(image):
    mask = Image.new('L', image.size, 0)
    mask_draw = ImageDraw.Draw(mask)
    mask_draw.ellipse((0, 0) + image.size, fill=255)
    result = ImageOps.fit(image, mask.size, centering=(0.5, 0.5))
    result.putalpha(mask)
    return result

# Callback function to update the input box
def update_prompt():
    st.session_state["prompt"] = st.session_state["select_box_prompt"]

# Title with logo
col1, col2 = st.columns([1, 5])
with col1:
    st.image("verdigris_logo.png", width=120)
with col2:
    st.title("Verdigris Chatbot")
    st.write("powered by Claude 3.5 Sonnet")

# Sidebar for user trace data
st.sidebar.title("Trace Data")

# Session State Management
if 'history' not in st.session_state:
    st.session_state['history'] = []
if 'prompt' not in st.session_state:
    st.session_state['prompt'] = ""

# example prompts
with open("example_prompts.json", "r") as file:
    example_prompts = json.load(file)

# Add vertical space using margin-top with st.markdown
st.markdown("<div style='margin-top: 20px'></div>", unsafe_allow_html=True)

# Add a select box for knowledge base prompts with an on_change callback
selected_prompt = st.selectbox(
    "Frequently asked questions",
    example_prompts,
    key="select_box_prompt",
    on_change=update_prompt  # Callback to update the input box
)

# Add vertical space using margin-top with st.markdown
st.markdown("<div style='margin-top: 20px'></div>", unsafe_allow_html=True)

# Display a text box for input
st.write("## Type your Question")

# Add a form to handle user input
with st.form(key="qa_form", clear_on_submit=True):
    # Display a text box for input with a hidden label
    prompt = st.text_input("Type your question below or select the question from above",
                           max_chars=2000,
                           value=st.session_state['prompt'],
                           key="input_prompt",
                           )
    # Display a primary button for submission
    submit_button = st.form_submit_button("Get Answer from AI")

# Function to calculate dynamic height for responses
def calculate_text_area_height(text, min_height=100, max_height=400):
    lines = text.count("\n") + 5
    estimated_height = min(max_height, max(min_height, lines * 40))
    return estimated_height

# Handling user input and responses
if submit_button and prompt:
    event = {
        "sessionId": st.session_state['session_id'],
        "question": prompt
    }
    with st.spinner('Thinking...'):
        captured_string, llm_response, metadata_list = agenthelper.askQuestion(event['question'], event['sessionId'])

    if llm_response:
        # Check if metadata_list is a list and contains data
        if isinstance(metadata_list, list) and metadata_list:
            urls_text = "\n"+"\nThis answer is generated by referring to our company documentation below.\n\nFeel free to ask follow-up questions or see the references:\n"
            for item in metadata_list:
                urls_text += f"- **{item['title']}** [Link]({item['url']})\n"
        else:
            urls_text = "\n"+"\n"+"\n\nThis answer does not contain references from our documentation. \n\n please contact support@verdigri.co for confirming the credibility of the content or ask more questions.\n"
        llm_response += urls_text

        st.session_state['history'].append({"question": prompt, "answer": llm_response})
        st.sidebar.text_area("Trace Output", value=captured_string, height=300)
    else:
        st.session_state['history'].append({"question": prompt, "answer": "No response received."})


# Display conversation history
st.write("## Conversation History")

# Load images outside the loop to optimize performance
human_image = Image.open('human_face.png')
robot_image = Image.open('verdigrisChar.jpg')
circular_human_image = crop_to_circle(human_image)
circular_robot_image = crop_to_circle(robot_image)

for index, chat in enumerate(reversed(st.session_state['history'])):
    col1_q, col2_q = st.columns([2, 10])
    with col1_q:
        st.image(circular_human_image, width=125)
    with col2_q:
        st.text_area("Q:", value=chat["question"], height=50, key=f"question_{index}", disabled=True)

    col1_a, col2_a = st.columns([2, 10])
    if isinstance(chat["answer"], pd.DataFrame):
        with col1_a:
            st.image(circular_robot_image, width=100)
        with col2_a:
            st.dataframe(chat["answer"], key=f"answer_df_{index}")
    else:
        answer_height = calculate_text_area_height(chat["answer"])
        with col1_a:
            st.image(circular_robot_image, width=150)
        with col2_a:
            st.markdown(
                f"<div style='height: {answer_height}px; overflow-y: auto;'>{chat['answer']}</div>",
                unsafe_allow_html=True
            )
